---
title: "ETH 2025 Survival Survey Dashboard"
format: 
  dashboard:
    embed-resources: true
theme:
  - cosmo
  - assets/styles/custom.scss
  - assets/styles/quarto.scss
execute:
  warning: false
---



```{r, loadpackages}
#| echo: false
#| include: false
# Data manipulation and cleaning
library(forcats)
library(janitor)        
library(lubridate)
library(tidyverse)

# Data import/export
library(targets)
library(googlesheets4)
library(readr)
library(httr)
library(jsonlite)

# Visualization
library(ggthemes)
library(plotly)         
library(highcharter)    

# Tables and reporting
library(DT)
library(gt)
library(gtsummary)

# Statistical analysis
library(outliers)

# Custom functions
tar_source("R/formatting.R")
```


```{r, import_data}
#| echo: false
#| include: false
# Configuration
USERNAME <- "mohammed.seidhussen@oneacrefund.org"
API_KEY <- "a749d18804539c5a2210817cda29630391a088bd"  # Get from CommCareHQ > Settings > API Key
PROJECT_SPACE <- "oaf-ethiopia"  # Found in URL: /a/[project_space]/
FORM_ID <- "e24ab639e5b7d1b609cf2894f7057b75"  # Found in Form Export URLs

# API Endpoint
url <- paste0("https://www.commcarehq.org/a/", PROJECT_SPACE, "/api/v0.5/odata/forms/", FORM_ID, "/feed")

# Pagination settings
limit <- 2000
offset <- 0
all_records <- list()

while (TRUE) {
  # Set query parameters
  query <- list(
    limit = limit,
    offset = offset
  )

  # Make API request
  response <- GET(
    url,
    query = query,
    authenticate(USERNAME, API_KEY, type = "basic")
  )
  
  # Check response
  if (status_code(response) != 200) {
    cat(paste0("Error: ", status_code(response), "\n"))
    cat(content(response, "text"), "\n")
    break
  }
  
  # Parse response
  data <- fromJSON(content(response, "text"))
  records <- data$value
  
  if (length(records) == 0) {
    break
  }
  
  # Add records to collection
  all_records <- c(all_records, records)
  
  # Check if we have all records
  if (length(records) < limit) {
    break
  }
  
  # Update offset for next page
  offset <- offset + limit
  cat(paste0("Fetched ", length(all_records), " records so far...\n"))
}

# Convert to data frame
# Note: This approach works best if all records have the same structure
df <- bind_rows(all_records)

```

```{r, clean_data}
# chnage --- into NA for all varailes 
df <- df %>%
  mutate(across(everything(), ~ na_if(., "---")))
```

```{r, change_to_dataframe}
#| echo: false
#| include: false

df <- data.frame(lapply(df, function(col) {
    if (is.list(col)) {
        return(sapply(col, function(x) if (length(x) > 0) x[1] else NA))  # Take the first element or NA
    } else {
        return(col)
    }
}), stringsAsFactors = FALSE)


```



```{r}
df<-  df |> 
  mutate(date = as.Date(completed_time))
```



```{r}
df_completed <- df |> 
  dplyr::filter(consent==1)
```

# Overview


## Row 

::: {.valuebox icon="arrow-repeat" color="vb-warning" style="padding: 3px 6px; font-size: 10px; height: 25px; line-height: 20px; margin: 0;"}
Total survey

`r nrow(df)`


:::

```{r}

# Calculate percentage of refusal

refusal <- df |> 
  summarise(refusal_count = sum(consent == 0, na.rm = TRUE))

```


::: {.valuebox icon="exclamation-circle" color="warning" style="padding: 3px 6px; font-size: 10px; height: 25px; line-height: 20px; margin: 0;"}

Refusal: `r refusal`


:::


::: {.valuebox icon="plus-circle" color="vb-info" style="padding: 3px 6px; font-size: 10px; height: 25px; line-height: 20px; margin: 0;"}
Total Eligible Respondents

`r nrow(df_completed)`

:::


```{r}
# Define start date
start_date <- as.Date("2025-07-14") # Replace with your actual start date

# Calculate the total number of weekdays since start_date
total_weekdays <- sum(!weekdays(seq.Date(start_date, Sys.Date(), by = "day")) %in% c("Saturday", "Sunday"))

# Calculate actual surveys (total number of rows in df_completed)
actual <- nrow(df_completed)

# Calculate target (20 enumerators * 6 surveys per day * number of weekdays)
target <- 20 * 5 * total_weekdays

# Calculate percentage of actual surveys compared to target
percentage_actual_vs_target <- (actual / target) * 100

```


::: {.valuebox icon="clipboard-check" color="vb-info" style="padding: 3px 6px; font-size: 10px; height: 25px; line-height: 20px; margin: 0;"}
Percentage of target

`r round(percentage_actual_vs_target, 1)`%
:::



```{r}
expected <- 3600 # Replace with your actual expected number of surveys


# Calculate percentage of completed surveys compared to expected

percentage <- (nrow(df_completed) / expected) * 100
```




::: {.valuebox icon="clock" color="blue" style="padding: 3px 6px; font-size: 10px; height: 25px; line-height: 20px; margin: 0;"}
Percentage of Expected

`r round(percentage, 1)`%

:::



## Row

### Column {.tabset width="50%"}

#### Total 

```{r}
# Define start date

# Calculate the total number of weekdays since start_date
total_weekdays <- sum(!weekdays(seq.Date(start_date, Sys.Date(), by = "day")) %in% c("Saturday", "Sunday"))

# Set daily target
daily_target <- 5 # Assuming each enumerator is expected to complete 6 surveys per day
# Calculate total target surveys
total_target <- total_weekdays * daily_target

# Calculate actual surveys per username
df_summary <- df_completed |> 
  count(username)

# Plot actual surveys with a horizontal line for target
plot_ly(data = df_summary) |> 
  add_bars(
    x = ~username, 
    y = ~n, 
    name = "Actual Surveys"
  ) |> 
  add_trace(
    x = ~username, 
    y = rep(total_target, length(df_summary$username)),  # Repeat target for each username
    type = "scatter", 
    mode = "lines", 
    line = list(color = "red", dash = "dash"), 
    name = "Target"
  ) |> 
  layout(
    title = "Total Surveys per Enumerator vs Target",  
    xaxis = list(title = NULL),             
    yaxis = list(title = "Surveys"),          
    showlegend = TRUE                         
  )

```


#### Daily


```{r}

# Calculate average surveys per day per username
average_perday <- df_completed |> 
  mutate(date_only = as.Date(completed_time)) |> 
  group_by(username, date_only) |> 
  summarise(total_collected = n(), .groups = 'drop') |> 
  group_by(username) |> 
  summarise(average_per_day = mean(total_collected)) |> 
  arrange(-average_per_day)

# Plot with Plotly
plot_ly(data = average_perday, 
        x = ~username, 
        y = ~average_per_day, 
        type = 'bar', 
        name = 'Average per Day') |> 
  add_trace(
    x = ~username,               # Match the x-values (usernames)
    y = rep(5, length(average_perday$username)),  # Horizontal line at y = 6
    type = 'scatter', 
    mode = 'lines', 
    line = list(color = 'red', dash = 'dash'),  # Customize line style (red, dashed)
    name = 'Target'
  ) |> 
  layout(
    title = "Daily Surveys per Enumerator",  # Add title
    xaxis = list(title = NULL),              # Remove x-axis label
    yaxis = list(title = NULL),              # Remove y-axis label
    showlegend = TRUE                        # Enable legend to show "Target" label
  )
```




### Column {.tabset width="50%"}

#### Per day

```{r}


# Calculate total surveys collected each day
total_collected_each_day <- df_completed |> 
  mutate(date_only = as.Date(completed_time)) |> 
  group_by(date_only) |> 
  summarise(total_collected = n())

# Plot with Plotly
plot_ly(data = total_collected_each_day, 
        x = ~date_only, 
        y = ~total_collected, 
        type = 'scatter', 
        mode = 'lines', 
        name = 'Total Collected') |> 
  layout(
    title = "Total Survey per Day",          # Add title
    xaxis = list(title = NULL),              # Remove x-axis label
    yaxis = list(title = NULL),              # Remove y-axis label
    showlegend = FALSE                       # Disable legend
  )

```


#### Per enumurator

```{r}

# Step 1: Extract the date and count unique usernames per day
total_collected_by_enumerator <- df_completed |> 
  mutate(date_only = as.Date(completed_time)) |> 
  group_by(date_only, username) |> 
  summarise(total_collected = n(), .groups = 'drop')

total_collected_by_enumerator |> 
  hchart('line', hcaes(x = 'date_only', y = 'total_collected', group = username)) |>  hc_legend(enabled = FALSE)|> 
  hc_legend(enabled = FALSE) |> 
  hc_title(text = "Enumurator productivity") |>  # Add title here
  hc_xAxis(title = list(text = NULL)) |>    # Remove x-axis label
  hc_yAxis(title = list(text = NULL))       # Remove

```


# Duration of the Survey


```{r}

df_completed1 <- df_completed
  
df_completed1$duration <- round(as.duration(interval(df_completed1$started_time, df_completed1$completed_time)) / dminutes(1))

overall_avg_duration <- mean(df_completed1$duration[!is.na(df_completed1$duration)])

overall_min_duration <- min(df_completed1$duration[!is.na(df_completed1$duration)])

overall_max_duration <- max(df_completed1$duration[!is.na(df_completed1$duration)])
```


## Row 

::: {.valuebox icon="arrow-repeat" color="vb-warning"}
Average duration

`r round(overall_avg_duration, 1)`


:::


::: {.valuebox icon="plus-circle" color="vb-info"}
minimum duration

`r overall_min_duration`

:::



::: {.valuebox icon="check-circle" color="vb-success"}
Maximum Duration

`r overall_max_duration`

:::




```{r}
less_than_5_minutes<- df_completed1 |> 
  filter(duration <= 5)
```




::: {.valuebox icon="clock" color="blue"}
Survey below 5 minutes

`r nrow(less_than_5_minutes)`

:::


## Row

### Column {.tabset width="50%"}


#### Enumerator


```{r}
# Calculate summary statistics
overall_avg_duration <- mean(df_completed1$duration, na.rm = TRUE)

summary_table <- df_completed1 %>%
  group_by(username) %>%
  summarise(
    duration_mean = mean(duration, na.rm = TRUE),
    .groups = "drop"
  )

# Create horizontal bar chart
plot_ly(
  data = summary_table,
  x = ~duration_mean,
  y = ~username,
  type = "bar",
  orientation = "h",  # Horizontal bar
  name = "Average Duration"
) %>%
  add_trace(
    x = rep(overall_avg_duration, nrow(summary_table)),  # Overall average value for each username
    y = ~username,  # Match usernames for alignment
    type = "scatter",
    mode = "lines",
    line = list(color = "red", dash = "dash"),  # Red dashed line for overall average
    name = "Overall Average"
  ) %>%
  layout(
    title = "Average Duration per User",
    xaxis = list(title = "Average Duration (minutes)"),
    yaxis = list(title = NULL),  # No y-axis title for simplicity
    showlegend = TRUE  # Display legend for clarity
  )

```



#### Below 5 

```{r}
df_completed1 |> 
  filter(duration <= 5) |> 
  select(username, unique_id, started_time, completed_time, duration) |>
  datatable(options = list(
    pageLength = 10,  # Number of rows per page
    autoWidth = TRUE,  # Adjusts column width
    columnDefs = list(list(className = 'dt-center', targets = "_all"))  # Center-align columns
  )) %>%
  formatRound(columns = 'duration', digits = 1)  # Round 'duration' to 2 decimal places
```


#### Below 5 enumurator 

```{r}
# Filter and calculate counts for durations below 8 minutes
summary_table <- df_completed1 |> 
  filter(duration <= 5) |> 
  group_by(username) |> 
  summarise(count_below_5 = n(), .groups = "drop")

# Create bar graph
plot_ly(
  data = summary_table,
  x = ~username,
  y = ~count_below_5,
  type = "bar",
  name = "Below 5 Minutes",
  marker = list(color = "steelblue")  # Custom color
) %>%
  layout(
    title = "Number of Observations with Duration Below 8 Minutes",
    xaxis = list(title = "Username"),
    yaxis = list(title = "Count"),
    showlegend = FALSE  # Legend not needed for single series
  )
```




#### Above average 

```{r}
df_completed1 |> 
  filter(duration > mean(df_completed1$duration[!is.na(df_completed1$duration)])) |> 
  select(username, unique_id, started_time, completed_time, duration) |>
  datatable(options = list(
    pageLength = 10,  # Number of rows per page
    autoWidth = TRUE,  # Adjusts column width
    columnDefs = list(list(className = 'dt-center', targets = "_all"))  # Center-align columns
  )) |> 
  formatRound(columns = 'duration', digits = 1)  # Round 'duration' to 2 decimal places
```


### Column {.tabset width="50%"}

#### Night Survey

```{r}

df_completed1 |>
  mutate(started_hour = hour(started_time)) |>          # Extract hour
  filter(started_hour >= 19 | started_hour < 6) |>      # Filter for 7 PM to 6 AM
  select(username, farmer_name, started_time) |>             # Select relevant columns
  gt() |>
  tab_header(title = "Survey Records Starting Between 7 PM and 6 AM") |>
  cols_label(
    username = "Enumerator",
    farmer_name= "Farmer name",
    started_time = "Start Time"
  ) |>
  cols_align(align = "center", columns = everything())

```



#### enumurator

```{r}
# Calculate number of surveys per username for surveys starting between 7 PM and 6 AM
summary_table <- df_completed1 |>
  mutate(started_hour = hour(started_time)) |>  # Extract hour from started_time
  filter(started_hour >= 19 | started_hour < 6) |>  # Keep surveys starting between 7 PM and 6 AM
  group_by(username) |>  # Group by username
  summarise(surveys_count = n(), .groups = "drop")  # Count surveys per username

# Create horizontal bar chart using plotly
plot_ly(
  data = summary_table,
  x = ~surveys_count,
  y = ~username,
  type = "bar",
  orientation = "h",  # Horizontal bars
  name = "Surveys Between 7 PM and 6 AM"
) %>%
  layout(
    title = "Number of Surveys Starting Between 7 PM and 6 AM by Username",
    xaxis = list(title = "Number of Surveys"),
    yaxis = list(title = "Username"),
    showlegend = FALSE
  )

```



# Key statistics 

## Row

### Column {.tabset width="50%"}

#### survival Rate
```{r}
# Calculate survival rates for each species directly
survival_rates <- df_completed %>%
  mutate(across(c(starts_with("ps_num_planted_"), starts_with("num_surv_")), 
                as.numeric)) %>%
  # Calculate survival rates for each species
  mutate(
    gesho = (num_surv_gesho / ps_num_planted_gesho) * 100,
    dec = (num_surv_dec / ps_num_planted_dec) * 100,
    grev = (num_surv_grev / ps_num_planted_grev) * 100,
    moringa = (num_surv_moringa / ps_num_planted_moringa) * 100,
    coffee = (num_surv_coffee / ps_num_planted_coffee) * 100,
    papaya = (num_surv_papaya / ps_num_planted_papaya) * 100,
    wanza = (num_surv_wanza / ps_num_planted_wanza) * 100
  ) %>%
  select(gesho, dec, grev, moringa, coffee, papaya, wanza) %>%
  # Handle cases where planted = 0 (avoid division by zero)
  mutate(across(everything(), ~ ifelse(is.nan(.) | is.infinite(.), 0, .))) %>%
  # Get mean survival rate for each species
  summarize(across(everything(), mean, na.rm = TRUE)) %>%
  pivot_longer(everything(), names_to = "species", values_to = "survival_rate")

# Create plot
plot_ly(survival_rates, x = ~species, y = ~survival_rate, type = "bar",
        text = ~paste0(round(survival_rate, 1), "%"), textposition = "auto") %>%
  layout(
    title = "Survival Rate by Species",
    xaxis = list(title = "Species"),
    yaxis = list(title = "Survival Rate (%)", range = c(0, 100))  # Set y-axis from 0-100%
  )


```
