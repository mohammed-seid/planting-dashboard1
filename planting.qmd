---
title: "ETH 2024 Planting Survey"
format: 
  dashboard:
    embed-resources: true
theme:
  - cosmo
  - assets/styles/custom.scss
  - assets/styles/quarto.scss
execute:
  warning: false
---



```{r, loadpackages}
#| echo: false
#| include: false
library(tidyverse)
library(forcats)
library(targets)
library("googlesheets4")
library(janitor)
library(ggthemes)
library(lubridate)
library(plotly)
library(highcharter)
library(janitor)
library(outliers)
library(DT)
library(gt)
library(gtsummary)
library(lubridate)
tar_source("R/formatting.R")
```



```{r, authenticate_googlesheet}
#| echo: false
#| include: false
gs4_auth(cache = ".secrets", email = "mohammed.seidhussen@oneacrefund.org")

```


```{r, import_data}
#| echo: false
#| include: false
df<- read_sheet("https://docs.google.com/spreadsheets/d/1jA-GzgXFwaPvqgUuniywHc8t3unz_Rsl0alHNx7sxgM/edit?gid=275273939#gid=275273939", "Sync_Dataiku")

```






```{r, change_to_dataframe}
#| echo: false
#| include: false

df <- data.frame(lapply(df, function(col) {
    if (is.list(col)) {
        return(sapply(col, function(x) if (length(x) > 0) x[1] else NA))  # Take the first element or NA
    } else {
        return(col)
    }
}), stringsAsFactors = FALSE)


```



```{r}
df<-  df |> 
  mutate(date = as.Date(completed_time))
```

```{r}
df <- df |> 
  filter(date > as.Date("2024-10-31"))
```



```{r}
df_completed <- df |> 
  dplyr::filter(intro_consent.knows_info == 1)
```


# Overview 


## Row 

::: {.valuebox icon="arrow-repeat" color="vb-warning"}
Total survey

`r nrow(df)`


:::


::: {.valuebox icon="plus-circle" color="vb-info"}
Total completed Survey

`r nrow(df_completed)`

:::



```{r}

na_count <- sum(is.na(df_completed$resp_category.oaf_direct))


```


::: {.valuebox icon="check-circle" color="vb-success"}
Number of ghost farmer

`r na_count`

:::


```{r}
expected <- 4158

percentage <- (nrow(df_completed) / expected) * 100
```




::: {.valuebox icon="clock" color="blue"}
Percentage of Expected

`r round(percentage, 1)`%

:::



## Row

### Column {.tabset width="50%"}

#### Total Surveys per Enumerator

```{r}
df_completed |> 
  dplyr::count(username) |> 
  arrange(-n) |> 
  hchart('bar', hcaes(x = 'username', y = 'n')) |>  hc_legend(enabled = FALSE)
```

#### Daily Surveys per Enumerator

```{r}
average_perday <- df_completed |> 
  mutate(date_only = as.Date(completed_time)) |> 
  group_by(username, date_only) |> 
  summarise(total_collected = n(), .groups = 'drop') |> 
  group_by(username) |> 
  summarise(average_per_day = mean(total_collected)) |> arrange(-average_per_day)


average_perday |> 
  hchart('bar', hcaes(x = 'username', y = 'average_per_day'))
```



### Column {.tabset width="50%"}

#### Total survey per day

```{r}

total_collected_each_day <- df_completed |> 
  mutate(date_only = as.Date(completed_time)) |> 
  group_by(date_only) |> 
  summarise(total_collected = n())

total_collected_each_day |> 
  hchart('line', hcaes(x = 'date_only', y = 'total_collected'))

```


#### Total survey per day per enumurator

```{r}

# Step 1: Extract the date and count unique usernames per day
total_collected_by_enumerator <- df_completed |> 
  mutate(date_only = as.Date(completed_time)) |> 
  group_by(date_only, username) |> 
  summarise(total_collected = n(), .groups = 'drop')

total_collected_by_enumerator |> 
  hchart('line', hcaes(x = 'date_only', y = 'total_collected', group = username)) |>  hc_legend(enabled = FALSE)

```

# Duration of the Survey


```{r}
df_completed$duration <- round(as.numeric(df_completed$completed_time - df_completed$started_time)/60)

overall_avg_duration <- mean(df_completed$duration[!is.na(df_completed$duration)])

overall_min_duration <- min(df_completed$duration[!is.na(df_completed$duration)])

overall_max_duration <- max(df_completed$duration[!is.na(df_completed$duration)])
```


## Row 

::: {.valuebox icon="arrow-repeat" color="vb-warning"}
Average duration

`r round(overall_avg_duration, 1)`


:::


::: {.valuebox icon="plus-circle" color="vb-info"}
minimum duration

`r overall_min_duration`

:::



::: {.valuebox icon="check-circle" color="vb-success"}
Maximum Duration

`r overall_max_duration`

:::




```{r}
less_than_15_minutes<- df_completed |> 
  filter(duration <= 15)
```




::: {.valuebox icon="clock" color="blue"}
survey below 15 minutes

`r nrow(less_than_15_minutes)`

:::


## Row

### Column {.tabset width="50%"}


#### Enumerator level average survey duration

```{r}
# As a practice, we should look at enumerator level checks. Also, we may extend this for enumerator pairs or enumerator teams.

################### Enumerator level average survey duration ########################


summary_table<- df_completed %>%
  group_by(username) %>%
  summarise(duration_mean = mean(duration),
            overall_avg_duration,
            perc_diff_avg = ((duration_mean - overall_avg_duration) / overall_avg_duration))

# Display the table using DT
datatable(summary_table, options = list(
  pageLength = 10,
  autoWidth = TRUE,
  columnDefs = list(list(className = 'dt-center', targets = "_all"))
)) |> 
  formatRound(columns = c('duration_mean', 'overall_avg_duration', 'perc_diff_avg'), digits = 2) %>%
  formatPercentage('perc_diff_avg', digits = 2)
```

#### Survey below 15 minutes 

```{r}
df_completed |> 
  filter(duration <= 15) |> 
  select(username, formid, started_time, completed_time, duration) |>
  datatable(options = list(
    pageLength = 10,  # Number of rows per page
    autoWidth = TRUE,  # Adjusts column width
    columnDefs = list(list(className = 'dt-center', targets = "_all"))  # Center-align columns
  )) %>%
  formatRound(columns = 'duration', digits = 1)  # Round 'duration' to 2 decimal places
```

#### Survey above average duration 

```{r}
df_completed |> 
  filter(duration > mean(df_completed$duration[!is.na(df_completed$duration)])) |> 
  select(username, formid, started_time, completed_time, duration) |>
  datatable(options = list(
    pageLength = 10,  # Number of rows per page
    autoWidth = TRUE,  # Adjusts column width
    columnDefs = list(list(className = 'dt-center', targets = "_all"))  # Center-align columns
  )) |> 
  formatRound(columns = 'duration', digits = 1)  # Round 'duration' to 2 decimal places
```


### Column {.tabset width="50%"}

#### Survey between 7 PM and 6 AM

```{r}
df_completed |>
  mutate(started_date = as.Date(started_time),          # Extract date
         started_hour = hour(started_time)) |>          # Extract hour
  filter(started_hour >= 19 | started_hour < 6) |>      # Filter for 7 PM to 6 AM
  group_by(started_date) |>                             # Group by date
  summarise(observations_7pm_to_6am = n(), .groups = 'drop') |>  # Count observations
  gt() |>
  tab_header(title = "Observations Starting Between 7 PM and 6 AM") |>
  cols_label(
    started_date = "Survey Date",
    observations_7pm_to_6am = "Count of Observations"
  ) |>
  fmt_number(columns = observations_7pm_to_6am, decimals = 0) |>  # Format counts with no decimals
  cols_align(align = "center", columns = everything())
```


#### Survey between 7 PM and 6 AM per enumurator

```{r}
df_completed |>
  mutate(started_date = as.Date(started_time),          # Extract date
         started_hour = hour(started_time)) |>          # Extract hour
  filter(started_hour >= 19 | started_hour < 6) |>      # Filter for 7 PM to 6 AM
  group_by(started_date, username) |>                   # Group by date and enumerator
  summarise(observations_7pm_to_6am = n(), .groups = 'drop') |>  # Count observations
  gt() |>
  tab_header(title = "Observations Starting Between 7 PM and 6 AM per Enumerator") |>
  cols_label(
    started_date = "Survey Date",
    username = "Enumerator",
    observations_7pm_to_6am = "Count of Observations"
  ) |>
  fmt_number(columns = observations_7pm_to_6am, decimals = 0) |>
  cols_align(align = "center", columns = everything())
```


#### Survey Records between 7 PM and 6 AM

```{r}

df_completed |>
  mutate(started_hour = hour(started_time)) |>          # Extract hour
  filter(started_hour >= 19 | started_hour < 6) |>      # Filter for 7 PM to 6 AM
  select(username, formid, started_time) |>             # Select relevant columns
  gt() |>
  tab_header(title = "Survey Records Starting Between 7 PM and 6 AM") |>
  cols_label(
    username = "Enumerator",
    formid = "Form ID",
    started_time = "Start Time"
  ) |>
  cols_align(align = "center", columns = everything())

```



# Key statistics 

## Row

### Column {.tabset width="50%"}

#### catagorization
```{r}

df_completed |> select(resp_category.receive_tree, resp_category.oaf_direct, resp_category.receive_tree_inst, resp_category.inst_oaf_indirect) |> tbl_summary(missing="no", label = list(resp_category.receive_tree="Recived tree seedling from OAF and no-OAF",
    resp_category.oaf_direct="Recived tree seedling from OAF (OAF Direct)",
    resp_category.receive_tree_inst="Recived trees from instituitons",
    resp_category.inst_oaf_indirect="Tree recived from institutions is OAF tree")) |>
   modify_header(label = "**Respondent catagorization**") |> 
    remove_row_type(type = "level", level_value = c("0", "dnk")) |> 
  as_gt()

```

#### Demography 

```{r}
df_completed |> filter(resp_category.oaf_direct==1) |> 
  mutate(youth = if_else(demo.mcf_list.m_nmales > 0 | demo.mcf_list.m_nfemales > 0, 1, 0)) |>  select(demo.gender, demo.marital_status, demo.hh_size_total, demo.age, youth) |> tbl_summary(statistic = all_continuous() ~ "{mean} ({min}, {max})", missing = "no", label = list(demo.gender="Gender of Respondent",
    demo.marital_status="Marital Status",
    demo.hh_size_total="Household Size",
    demo.age="Age of the respondent",
    youth="% of households with youth HH member")) |>
   modify_header(label = "**Demographic characterstics of the respondents**") |> 
    remove_row_type(type = "level", level_value = c("0", "dnk")) |> 
  as_gt()

```

### Column {.tabset width="50%"}


#### Adopters

```{r}

n_farmer<- df_completed |> 
  filter(resp_category.oaf_direct == 1) |> 
  select(starts_with("oaf_tree_got_")) |> 
  summarise(across(everything(), ~ sum(replace_na(., 0)), .names = "sum_{col}")) |> 
  pivot_longer(cols = everything(), 
               names_to = "variable", 
               values_to = "number of adopters") |> 
  mutate(variable = sub("sum_oaf_tree_got_", "", variable)) 


average_tree<- df_completed |> 
  filter(resp_category.oaf_direct == 1) |> 
  select(matches("^oaf_trees\\.oaf_.*num_got$")) |> 
  summarise(across(everything(), ~ round(mean(., na.rm = TRUE), 1), .names = "mean_{col}")) |> 
  pivot_longer(cols = everything(), 
               names_to = "variable", 
               values_to = "Average Tree taken from the survey") |> 
  mutate(variable = sub("mean_oaf_trees.oaf_", "", variable)) |> 
  mutate(variable = gsub("\\.num_got", " ", variable))


troster_average<- df_completed |> 
  filter(resp_category.oaf_direct == 1) |> 
  select(matches("^num_oaf_.*_troster$")) |> 
  summarise(across(everything(), ~ round(mean(na_if(., 0), na.rm = TRUE), 1), .names = "mean_{col}")) |> 
  pivot_longer(cols = everything(), 
               names_to = "variable", 
               values_to = "Average tree taken from troster") |> 
  mutate(variable = sub("mean_num_oaf_", "", variable)) |> 
  mutate(variable = gsub("\\_troster", " ", variable))

n_farmer <- n_farmer |> 
  mutate(variable = str_replace_all(variable, " ", ""))

average_tree <- average_tree |> 
  mutate(variable = str_replace_all(variable, " ", ""))

troster_average <- troster_average |> 
  mutate(variable = str_replace_all(variable, " ", ""))



question_1 <- n_farmer |> 
  left_join(average_tree, by = "variable") |> 
  left_join(troster_average, by = "variable") 


question_1 |> 
  mutate(perc_diff_avg = ((`Average Tree taken from the survey` - `Average tree taken from troster`) / `Average tree taken from troster`) * 100) |> 
  rename("Percentage differenc from the troster"=perc_diff_avg,
         "Species"=variable) |> gt()



```

# Tree Taken 

## Column {.tabset }



```{r}

graph_data<- df_completed |> 
  filter(resp_category.oaf_direct == 1) |> 
  group_by(username) |> 
  select(username, matches("^oaf_trees\\.oaf_.*num_got$")) |> 
  summarise(across(everything(), ~ round(mean(., na.rm = TRUE), 1), .names = "mean_{col}")) |> 
  pivot_longer(cols = -username, 
               names_to = "variable", 
               values_to = "Average_Tree_taken_from_the_survey") |> 
  mutate(variable = sub("mean_oaf_trees.oaf_", "", variable),
         variable = gsub("\\.num_got", "", variable))


```


### arezelib

```{r}

graph_data |> filter(variable=="arzelib") |> 
  hchart('bar', hcaes(x = 'username', y = 'Average_Tree_taken_from_the_survey'))

```

### coffee

```{r}

graph_data |> filter(variable=="coffee") |> 
  hchart('bar', hcaes(x = 'username', y = 'Average_Tree_taken_from_the_survey'))

```


### dec

```{r}

graph_data |> filter(variable=="dec") |> 
  hchart('bar', hcaes(x = 'username', y = 'Average_Tree_taken_from_the_survey'))

```



### gesho

```{r}

graph_data |> filter(variable=="gesho") |> 
  hchart('bar', hcaes(x = 'username', y = 'Average_Tree_taken_from_the_survey'))

```


### grev

```{r}

graph_data |> filter(variable=="grev") |> 
  hchart('bar', hcaes(x = 'username', y = 'Average_Tree_taken_from_the_survey'))

```



### moringa

```{r}

graph_data |> filter(variable=="moringa") |> 
  hchart('bar', hcaes(x = 'username', y = 'Average_Tree_taken_from_the_survey'))

```


### papaya

```{r}

graph_data |> filter(variable=="papaya") |> 
  hchart('bar', hcaes(x = 'username', y = 'Average_Tree_taken_from_the_survey'))

```


### wanza

```{r}

graph_data |> filter(variable=="wanza") |> 
  hchart('bar', hcaes(x = 'username', y = 'Average_Tree_taken_from_the_survey'))

```

