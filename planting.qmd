---
format: dashboard
execute: 
  echo: false
---



```{r, loadpackages}
#| echo: false
#| include: false
library(tidyverse)
library(forcats)
library(targets)
library("googlesheets4")
library(janitor)
library(ggthemes)
library(lubridate)
library(plotly)
library(highcharter)
library(janitor)
library(outliers)
library(DT)
tar_source("R/formatting.R")
```



```{r, authenticate_googlesheet}
#| echo: false
#| include: false
gs4_auth(cache = ".secrets", email = "mohammed.seidhussen@oneacrefund.org")

```


```{r, import_data}
#| echo: false
#| include: false
df<- read_sheet("https://docs.google.com/spreadsheets/d/1jA-GzgXFwaPvqgUuniywHc8t3unz_Rsl0alHNx7sxgM/edit?gid=275273939#gid=275273939", "Sync_Dataiku")

```






```{r, change_to_dataframe}
#| echo: false
#| include: false

df <- data.frame(lapply(df, function(col) {
    if (is.list(col)) {
        return(sapply(col, function(x) if (length(x) > 0) x[1] else NA))  # Take the first element or NA
    } else {
        return(col)
    }
}), stringsAsFactors = FALSE)


```



```{r}
df<-  df |> 
  mutate(date = as.Date(completed_time))
```

```{r}
df <- df |> 
  filter(date > as.Date("2024-10-31"))
```



```{r}
df_completed <- df |> 
  dplyr::filter(intro_consent.knows_info == 1)
```





## Row 

::: {.valuebox icon="arrow-repeat" color="vb-warning"}
Total survey

`r nrow(df)`


:::


::: {.valuebox icon="plus-circle" color="vb-info"}
Total completed Survey

`r nrow(df_completed)`

:::



```{r}

na_count <- sum(is.na(df_completed$resp_category.oaf_direct))


```


::: {.valuebox icon="check-circle" color="vb-success"}
Number of ghost farmer

`r na_count`

:::


```{r}
expected <- 4158

percentage <- (nrow(df_completed) / expected) * 100
```




::: {.valuebox icon="clock" color="blue"}
Percentage of Expected

`r round(percentage, 1)`%

:::



## Row

### Column {.tabset width="50%"}

#### Total Surveys per Enumerator

```{r}
df_completed |> 
  dplyr::count(username) |> 
  arrange(-n) |> 
  hchart('bar', hcaes(x = 'username', y = 'n')) |>  hc_legend(enabled = FALSE)
```

#### Daily Surveys per Enumerator

```{r}
average_perday <- df_completed |> 
  mutate(date_only = as.Date(completed_time)) |> 
  group_by(username, date_only) |> 
  summarise(total_collected = n(), .groups = 'drop') |> 
  group_by(username) |> 
  summarise(average_per_day = mean(total_collected)) |> arrange(-average_per_day)


average_perday |> 
  hchart('bar', hcaes(x = 'username', y = 'average_per_day'))
```



### Column {.tabset width="50%"}

#### Total survey per day

```{r}

total_collected_each_day <- df_completed |> 
  mutate(date_only = as.Date(completed_time)) |> 
  group_by(date_only) |> 
  summarise(total_collected = n())

total_collected_each_day |> 
  hchart('line', hcaes(x = 'date_only', y = 'total_collected'))

```


#### Total survey per day per enumurator

```{r}

# Step 1: Extract the date and count unique usernames per day
total_collected_by_enumerator <- df_completed |> 
  mutate(date_only = as.Date(completed_time)) |> 
  group_by(date_only, username) |> 
  summarise(total_collected = n(), .groups = 'drop')

total_collected_by_enumerator |> 
  hchart('line', hcaes(x = 'date_only', y = 'total_collected', group = username)) |>  hc_legend(enabled = FALSE)

```

