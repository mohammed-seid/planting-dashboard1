---
title: "ETH 2024 Planting Survey"
format: 
  dashboard:
    embed-resources: true
theme:
  - cosmo
  - assets/styles/custom.scss
  - assets/styles/quarto.scss
execute:
  warning: false
---



```{r, loadpackages}
#| echo: false
#| include: false
library(tidyverse)
library(forcats)
library(targets)
library("googlesheets4")
library(janitor)
library(ggthemes)
library(lubridate)
library(plotly)
library(highcharter)
library(janitor)
library(outliers)
library(DT)
library(gt)
library(gtsummary)
library(lubridate)
library(plotly)
tar_source("R/formatting.R")
```



```{r, authenticate_googlesheet}
#| echo: false
#| include: false
gs4_auth(cache = ".secrets", email = "mohammed.seidhussen@oneacrefund.org")

```


```{r, import_data}
#| echo: false
#| include: false
df<- read_sheet("https://docs.google.com/spreadsheets/d/1jA-GzgXFwaPvqgUuniywHc8t3unz_Rsl0alHNx7sxgM/edit?gid=275273939#gid=275273939", "Sync_Dataiku")

```






```{r, change_to_dataframe}
#| echo: false
#| include: false

df <- data.frame(lapply(df, function(col) {
    if (is.list(col)) {
        return(sapply(col, function(x) if (length(x) > 0) x[1] else NA))  # Take the first element or NA
    } else {
        return(col)
    }
}), stringsAsFactors = FALSE)


```



```{r}
df<-  df |> 
  mutate(date = as.Date(completed_time))
```

```{r}
df <- df |> 
  filter(date > as.Date("2024-10-31"))
```

```{r}
df <- df |> 
  filter(username != "ajawa")
```



```{r}
df_completed <- df |> 
  dplyr::filter(intro_consent.knows_info == 1)
```


# Overview 


## Row 

::: {.valuebox icon="arrow-repeat" color="vb-warning" style="padding: 3px 6px; font-size: 10px; height: 25px; line-height: 20px; margin: 0;"}
Total survey

`r nrow(df)`


:::


::: {.valuebox icon="plus-circle" color="vb-info" style="padding: 3px 6px; font-size: 10px; height: 25px; line-height: 20px; margin: 0;"}
Total completed Survey

`r nrow(df_completed)`

:::


```{r}

# Calculate percentage of NAs by group
name_notmuch <- df |> 
  summarise(na_count = sum(is.na(intro_consent.consent)))

refusal <- df |> 
  summarise(refusal_count = sum(intro_consent.consent == 0, na.rm = TRUE))

```


::: {.valuebox icon="exclamation-circle" color="warning" style="padding: 3px 6px; font-size: 10px; height: 25px; line-height: 20px; margin: 0;"}
Wrong number: `r name_notmuch`

Refusal: `r refusal`


:::



```{r}

na_count <- sum(is.na(df_completed$resp_category.oaf_direct))
na_percentage <- (na_count / nrow(df_completed)) * 100

```


::: {.valuebox icon="check-circle" color="vb-success" style="padding: 3px 6px; font-size: 10px; height: 25px; line-height: 20px; margin: 0;"}
Percentage of ghost farmers

`r round(na_percentage, 1)`%
:::


```{r}
# Define start date
start_date <- as.Date("2024-11-01")

# Calculate the total number of weekdays since start_date
total_weekdays <- sum(!weekdays(seq.Date(start_date, Sys.Date(), by = "day")) %in% c("Saturday", "Sunday"))

# Calculate actual surveys (total number of rows in df_completed)
actual <- nrow(df_completed)

# Calculate target (25 enumerators * 6 surveys per day * number of weekdays)
target <- 25 * 6 * total_weekdays

# Calculate percentage of actual surveys compared to target
percentage_actual_vs_target <- (actual / target) * 100

```


::: {.valuebox icon="clipboard-check" color="vb-info" style="padding: 3px 6px; font-size: 10px; height: 25px; line-height: 20px; margin: 0;"}
Percentage of target

`r round(percentage_actual_vs_target, 1)`%
:::



```{r}
expected <- 4900

percentage <- (nrow(df_completed) / expected) * 100
```




::: {.valuebox icon="clock" color="blue" style="padding: 3px 6px; font-size: 10px; height: 25px; line-height: 20px; margin: 0;"}
Percentage of Expected

`r round(percentage, 1)`%

:::



## Row

### Column {.tabset width="50%"}

#### Total 

```{r}
# Define start date
start_date <- as.Date("2024-11-01")

# Calculate the total number of weekdays since start_date
total_weekdays <- sum(!weekdays(seq.Date(start_date, Sys.Date(), by = "day")) %in% c("Saturday", "Sunday"))

# Set daily target
daily_target <- 6
total_target <- total_weekdays * daily_target

# Calculate actual surveys per username
df_summary <- df_completed |> 
  count(username)

# Plot actual surveys with a horizontal line for target
plot_ly(data = df_summary) |> 
  add_bars(
    x = ~username, 
    y = ~n, 
    name = "Actual Surveys"
  ) |> 
  add_trace(
    x = ~username, 
    y = rep(total_target, length(df_summary$username)),  # Repeat target for each username
    type = "scatter", 
    mode = "lines", 
    line = list(color = "red", dash = "dash"), 
    name = "Target"
  ) |> 
  layout(
    title = "Total Surveys per Enumerator vs Target",  
    xaxis = list(title = NULL),             
    yaxis = list(title = "Surveys"),          
    showlegend = TRUE                         
  )

```


#### Daily


```{r}

# Calculate average surveys per day per username
average_perday <- df_completed |> 
  mutate(date_only = as.Date(completed_time)) |> 
  group_by(username, date_only) |> 
  summarise(total_collected = n(), .groups = 'drop') |> 
  group_by(username) |> 
  summarise(average_per_day = mean(total_collected)) |> 
  arrange(-average_per_day)

# Plot with Plotly
plot_ly(data = average_perday, 
        x = ~username, 
        y = ~average_per_day, 
        type = 'bar', 
        name = 'Average per Day') |> 
  add_trace(
    x = ~username,               # Match the x-values (usernames)
    y = rep(6, length(average_perday$username)),  # Horizontal line at y = 6
    type = 'scatter', 
    mode = 'lines', 
    line = list(color = 'red', dash = 'dash'),  # Customize line style (red, dashed)
    name = 'Target'
  ) |> 
  layout(
    title = "Daily Surveys per Enumerator",  # Add title
    xaxis = list(title = NULL),              # Remove x-axis label
    yaxis = list(title = NULL),              # Remove y-axis label
    showlegend = TRUE                        # Enable legend to show "Target" label
  )
```




### Column {.tabset width="50%"}

#### Per day

```{r}


# Calculate total surveys collected each day
total_collected_each_day <- df_completed |> 
  mutate(date_only = as.Date(completed_time)) |> 
  group_by(date_only) |> 
  summarise(total_collected = n())

# Plot with Plotly
plot_ly(data = total_collected_each_day, 
        x = ~date_only, 
        y = ~total_collected, 
        type = 'scatter', 
        mode = 'lines', 
        name = 'Total Collected') |> 
  layout(
    title = "Total Survey per Day",          # Add title
    xaxis = list(title = NULL),              # Remove x-axis label
    yaxis = list(title = NULL),              # Remove y-axis label
    showlegend = FALSE                       # Disable legend
  )

```


#### Per enumurator

```{r}

# Step 1: Extract the date and count unique usernames per day
total_collected_by_enumerator <- df_completed |> 
  mutate(date_only = as.Date(completed_time)) |> 
  group_by(date_only, username) |> 
  summarise(total_collected = n(), .groups = 'drop')

total_collected_by_enumerator |> 
  hchart('line', hcaes(x = 'date_only', y = 'total_collected', group = username)) |>  hc_legend(enabled = FALSE)|> 
  hc_legend(enabled = FALSE) |> 
  hc_title(text = "Enumurator productivity") |>  # Add title here
  hc_xAxis(title = list(text = NULL)) |>    # Remove x-axis label
  hc_yAxis(title = list(text = NULL))       # Remove

```


# Duration of the Survey


```{r}

df_completed1 <- df_completed |> filter(resp_category.receive_tree==1) 
  
df_completed1$duration <- round(as.duration(interval(df_completed1$started_time, df_completed1$completed_time)) / dminutes(1))

overall_avg_duration <- mean(df_completed1$duration[!is.na(df_completed1$duration)])

overall_min_duration <- min(df_completed1$duration[!is.na(df_completed1$duration)])

overall_max_duration <- max(df_completed1$duration[!is.na(df_completed1$duration)])
```


## Row 

::: {.valuebox icon="arrow-repeat" color="vb-warning"}
Average duration

`r round(overall_avg_duration, 1)`


:::


::: {.valuebox icon="plus-circle" color="vb-info"}
minimum duration

`r overall_min_duration`

:::



::: {.valuebox icon="check-circle" color="vb-success"}
Maximum Duration

`r overall_max_duration`

:::




```{r}
less_than_8_minutes<- df_completed1 |> 
  filter(duration <= 8)
```




::: {.valuebox icon="clock" color="blue"}
Survey below 8 minutes

`r nrow(less_than_8_minutes)`

:::


## Row

### Column {.tabset width="50%"}


#### Enumerator


```{r}
# Calculate summary statistics
overall_avg_duration <- mean(df_completed1$duration, na.rm = TRUE)

summary_table <- df_completed1 %>%
  group_by(username) %>%
  summarise(
    duration_mean = mean(duration, na.rm = TRUE),
    .groups = "drop"
  )

# Create horizontal bar chart
plot_ly(
  data = summary_table,
  x = ~duration_mean,
  y = ~username,
  type = "bar",
  orientation = "h",  # Horizontal bar
  name = "Average Duration"
) %>%
  add_trace(
    x = rep(overall_avg_duration, nrow(summary_table)),  # Overall average value for each username
    y = ~username,  # Match usernames for alignment
    type = "scatter",
    mode = "lines",
    line = list(color = "red", dash = "dash"),  # Red dashed line for overall average
    name = "Overall Average"
  ) %>%
  layout(
    title = "Average Duration per User",
    xaxis = list(title = "Average Duration (minutes)"),
    yaxis = list(title = NULL),  # No y-axis title for simplicity
    showlegend = TRUE  # Display legend for clarity
  )

```



#### Below 8 

```{r}
df_completed1 |> 
  filter(duration <= 8) |> 
  select(username, formid, started_time, completed_time, duration) |>
  datatable(options = list(
    pageLength = 10,  # Number of rows per page
    autoWidth = TRUE,  # Adjusts column width
    columnDefs = list(list(className = 'dt-center', targets = "_all"))  # Center-align columns
  )) %>%
  formatRound(columns = 'duration', digits = 1)  # Round 'duration' to 2 decimal places
```


#### Below 8 enumurator 

```{r}
# Filter and calculate counts for durations below 8 minutes
summary_table <- df_completed1 |> 
  filter(duration <= 8) |> 
  group_by(username) |> 
  summarise(count_below_8 = n(), .groups = "drop")

# Create bar graph
plot_ly(
  data = summary_table,
  x = ~username,
  y = ~count_below_8,
  type = "bar",
  name = "Below 8 Minutes",
  marker = list(color = "steelblue")  # Custom color
) %>%
  layout(
    title = "Number of Observations with Duration Below 8 Minutes",
    xaxis = list(title = "Username"),
    yaxis = list(title = "Count"),
    showlegend = FALSE  # Legend not needed for single series
  )
```




#### Above average 

```{r}
df_completed1 |> 
  filter(duration > mean(df_completed1$duration[!is.na(df_completed1$duration)])) |> 
  select(username, formid, started_time, completed_time, duration) |>
  datatable(options = list(
    pageLength = 10,  # Number of rows per page
    autoWidth = TRUE,  # Adjusts column width
    columnDefs = list(list(className = 'dt-center', targets = "_all"))  # Center-align columns
  )) |> 
  formatRound(columns = 'duration', digits = 1)  # Round 'duration' to 2 decimal places
```


### Column {.tabset width="50%"}

#### Night Survey

```{r}

df_completed1 |>
  mutate(started_hour = hour(started_time)) |>          # Extract hour
  filter(started_hour >= 19 | started_hour < 6) |>      # Filter for 7 PM to 6 AM
  select(username, farmer_name, started_time) |>             # Select relevant columns
  gt() |>
  tab_header(title = "Survey Records Starting Between 7 PM and 6 AM") |>
  cols_label(
    username = "Enumerator",
    farmer_name= "Farmer name",
    started_time = "Start Time"
  ) |>
  cols_align(align = "center", columns = everything())

```



#### enumurator

```{r}
# Calculate number of surveys per username for surveys starting between 7 PM and 6 AM
summary_table <- df_completed1 |>
  mutate(started_hour = hour(started_time)) |>  # Extract hour from started_time
  filter(started_hour >= 19 | started_hour < 6) |>  # Keep surveys starting between 7 PM and 6 AM
  group_by(username) |>  # Group by username
  summarise(surveys_count = n(), .groups = "drop")  # Count surveys per username

# Create horizontal bar chart using plotly
plot_ly(
  data = summary_table,
  x = ~surveys_count,
  y = ~username,
  type = "bar",
  orientation = "h",  # Horizontal bars
  name = "Surveys Between 7 PM and 6 AM"
) %>%
  layout(
    title = "Number of Surveys Starting Between 7 PM and 6 AM by Username",
    xaxis = list(title = "Number of Surveys"),
    yaxis = list(title = "Username"),
    showlegend = FALSE
  )

```



# Key statistics 

## Row

### Column {.tabset width="50%"}

#### catagorization
```{r}

df_completed |> select(resp_category.receive_tree, resp_category.oaf_direct, resp_category.receive_tree_inst, resp_category.inst_oaf_indirect) |> tbl_summary(missing="no", label = list(resp_category.receive_tree="Recived tree seedling from OAF and no-OAF",
    resp_category.oaf_direct="Recived tree seedling from OAF (OAF Direct)",
    resp_category.receive_tree_inst="Recived trees from instituitons",
    resp_category.inst_oaf_indirect="Tree recived from institutions is OAF tree")) |>
   modify_header(label = "**Respondent catagorization**") |> 
    remove_row_type(type = "level", level_value = c("0", "dnk")) |> 
  as_gt()

```

#### Demography 

```{r}
df_completed |> filter(resp_category.oaf_direct==1) |> 
  mutate(youth = if_else(demo.mcf_list.m_nmales > 0 | demo.mcf_list.m_nfemales > 0, 1, 0)) |>  select(demo.gender, demo.marital_status, demo.hh_size_total, demo.age, youth) |> tbl_summary(statistic = all_continuous() ~ "{mean} ({min}, {max})", missing = "no", label = list(demo.gender="Gender of Respondent",
    demo.marital_status="Marital Status",
    demo.hh_size_total="Household Size",
    demo.age="Age of the respondent",
    youth="% of households with youth HH member")) |>
   modify_header(label = "**Demographic characterstics of the respondents**") |> 
    remove_row_type(type = "level", level_value = c("0", "dnk")) |> 
  as_gt()

```

### Column {.tabset width="50%"}


#### Adopters

```{r}

n_farmer<- df_completed |> 
  filter(resp_category.oaf_direct == 1) |> 
  select(starts_with("oaf_tree_got_")) |> 
  summarise(across(everything(), ~ sum(replace_na(., 0)), .names = "sum_{col}")) |> 
  pivot_longer(cols = everything(), 
               names_to = "variable", 
               values_to = "number of adopters") |> 
  mutate(variable = sub("sum_oaf_tree_got_", "", variable)) 


average_tree<- df_completed |> 
  filter(resp_category.oaf_direct == 1) |> 
  select(matches("^oaf_trees\\.oaf_.*num_got$")) |> 
  summarise(across(everything(), ~ round(mean(., na.rm = TRUE), 1), .names = "mean_{col}")) |> 
  pivot_longer(cols = everything(), 
               names_to = "variable", 
               values_to = "Average Tree taken from the survey") |> 
  mutate(variable = sub("mean_oaf_trees.oaf_", "", variable)) |> 
  mutate(variable = gsub("\\.num_got", " ", variable))


troster_average<- df_completed |> 
  filter(resp_category.oaf_direct == 1) |> 
  select(matches("^num_oaf_.*_troster$")) |> 
  summarise(across(everything(), ~ round(mean(na_if(., 0), na.rm = TRUE), 1), .names = "mean_{col}")) |> 
  pivot_longer(cols = everything(), 
               names_to = "variable", 
               values_to = "Average tree taken from troster") |> 
  mutate(variable = sub("mean_num_oaf_", "", variable)) |> 
  mutate(variable = gsub("\\_troster", " ", variable))

n_farmer <- n_farmer |> 
  mutate(variable = str_replace_all(variable, " ", ""))

average_tree <- average_tree |> 
  mutate(variable = str_replace_all(variable, " ", ""))

troster_average <- troster_average |> 
  mutate(variable = str_replace_all(variable, " ", ""))



question_1 <- n_farmer |> 
  left_join(average_tree, by = "variable") |> 
  left_join(troster_average, by = "variable") 


question_1 |> 
  mutate(perc_diff_avg = ((`Average Tree taken from the survey` - `Average tree taken from troster`) / `Average tree taken from troster`) * 100) |> 
  rename("Percentage differenc from the troster"=perc_diff_avg,
         "Species"=variable) |> gt()



```

# Tree Taken 

## Column {.tabset }



```{r}

graph_data<- df_completed |> 
  filter(resp_category.oaf_direct == 1) |> 
  group_by(username) |> 
  select(username, matches("^oaf_trees\\.oaf_.*num_got$")) |> 
  summarise(across(everything(), ~ round(mean(., na.rm = TRUE), 1), .names = "mean_{col}")) |> 
  pivot_longer(cols = -username, 
               names_to = "variable", 
               values_to = "Average_Tree_taken_from_the_survey") |> 
  mutate(variable = sub("mean_oaf_trees.oaf_", "", variable),
         variable = gsub("\\.num_got", "", variable))


```


### arezelib

```{r}

graph_data |> filter(variable=="arzelib") |> 
  hchart('bar', hcaes(x = 'username', y = 'Average_Tree_taken_from_the_survey'))

```

### coffee

```{r}

graph_data |> filter(variable=="coffee") |> 
  hchart('bar', hcaes(x = 'username', y = 'Average_Tree_taken_from_the_survey'))

```


### dec

```{r}

graph_data |> filter(variable=="dec") |> 
  hchart('bar', hcaes(x = 'username', y = 'Average_Tree_taken_from_the_survey'))

```



### gesho

```{r}

graph_data |> filter(variable=="gesho") |> 
  hchart('bar', hcaes(x = 'username', y = 'Average_Tree_taken_from_the_survey'))

```


### grev

```{r}

graph_data |> filter(variable=="grev") |> 
  hchart('bar', hcaes(x = 'username', y = 'Average_Tree_taken_from_the_survey'))

```



### moringa

```{r}

graph_data |> filter(variable=="moringa") |> 
  hchart('bar', hcaes(x = 'username', y = 'Average_Tree_taken_from_the_survey'))

```


### papaya

```{r}

graph_data |> filter(variable=="papaya") |> 
  hchart('bar', hcaes(x = 'username', y = 'Average_Tree_taken_from_the_survey'))

```


### wanza

```{r}

graph_data |> filter(variable=="wanza") |> 
  hchart('bar', hcaes(x = 'username', y = 'Average_Tree_taken_from_the_survey'))

```

